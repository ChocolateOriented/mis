<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mo9.risk.modules.dunning.dao.TMisCallingRecordDao">
    
	<sql id="TMisCallingRecordColumns">
		a.dbid as "dbid",
		a.id as "id",
		a.agent as "agent",
		a.peopleid as "peopleId",
		a.CallType as "callType",
		a.ExtensionNumber as "extensionNumber",
		a.TargetNumber as "targetNumber",
		a.CustomerNo as "customerNo",
		a.CallTime as "callTime",
		a.RingTime as "ringTime",
		a.StartTime as "startTime",
		a.EndTime as "endTime",
		a.FinishTime as "finishTime",
		a.DurationTime as "durationTime",
		a.Uuid as "uuid",
		a.createby as "createBy.name",
		a.createdate as "createDate",
		a.updateby as "updateBy.name",
		a.updatedate as "updateDate"
	</sql>
    
	<select id="get" resultType="TMisCallingRecord">
		SELECT
			<include refid="TMisCallingRecordColumns"/>
		FROM t_mis_calling_record a
		WHERE a.id = #{id}
	</select>
	
	<select id="findList" resultType="TMisCallingRecord">
		SELECT 
			a.dbid as "dbid",
			a.id as "id",
			a.agent as "agent",
			a.peopleid as "peopleId",
			p.nickname as "peopleName",
			a.CallType as "callType",
			a.ExtensionNumber as "extensionNumber",
			a.TargetNumber as "targetNumber",
			a.CustomerNo as "customerNo",
			a.CallTime as "callTime",
			a.RingTime as "ringTime",
			a.StartTime as "startTime",
			a.EndTime as "endTime",
			a.FinishTime as "finishTime",
			a.DurationTime as "durationTime",
			(
				SELECT o.dealcode FROM t_risk_buyer b
                INNER JOIN t_risk_order o ON b.id = o.buyer_id
                INNER JOIN t_mis_dunning_task t ON o.dealcode = t.dealcode
				WHERE b.mobile = a.TargetNumber
				ORDER BY o.id DESC
				LIMIT 1
			) as "dealcode",
			a.Uuid as "uuid",
			a.createby as "createBy.name",
			a.createdate as "createDate",
			a.updateby as "updateBy.name",
			a.updatedate as "updateDate",
			a.Status as "agentState"
		FROM t_mis_calling_record a
		LEFT JOIN t_mis_dunning_people p on a.peopleid = p.id
		<include refid="pageListCondotion"></include>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
			    ORDER BY a.CallTime DESC
			</otherwise>
		</choose>
		<if test="page != null">
			LIMIT ${page.firstResult}, ${page.pageSize}
		</if>
	</select>
	
	<select id="listCount" resultType="int">
		SELECT 
			COUNT(1)
		FROM t_mis_calling_record a
		LEFT JOIN t_mis_dunning_people p on a.peopleid = p.id
		<include refid="pageListCondotion"></include>
	</select>
	
	<sql id="pageListCondotion">
		<where>
			a.FinishTime IS NOT NULL
			<if test="targetNumber != null and targetNumber != ''">
				AND a.TargetNumber like CONCAT('%', #{targetNumber}, '%')
			</if>
			<if test="dunningPeople != null and dunningPeople.group != null and dunningPeople.group.id != null and dunningPeople.group.id != ''">
				AND p.groupId = #{dunningPeople.group.id}
			</if>
			<if test="groupIds != null">
				AND p.groupId in
				<if test="groupIds.size == 0">
					('')
				</if>
				<if test="groupIds.size > 0">
					<foreach item="groupId" index="index" collection="groupIds" open="(" separator="," close=")">
						#{groupId}
					</foreach>
				</if>
			</if>
			<if test="dunningPeople != null and dunningPeople.queryIds != null and dunningPeople.queryIds.size > 0">
				AND a.peopleId in
				<foreach item="item" index="index" collection="dunningPeople.queryIds" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<if test="peopleId != null and peopleId != ''">
				AND a.peopleId = #{peopleId}
			</if>
			<if test="callTimeFrom != null">
				<![CDATA[ AND a.CallTime >= #{callTimeFrom} ]]>
			</if>
			<if test="callTimeTo != null">
				<![CDATA[ AND a.CallTime < date_add(#{callTimeTo}, INTERVAL 1 DAY) ]]>
			</if>
			<if test="callType != null">
				AND a.callType = #{callType}
			</if>
			<if test="agentState != null and agentState != '' ">
				AND a.Status= #{agentState}
			</if>
			<if test="callState != null">
				<choose>
					<!-- 接通 -->
					<when test="callState == '0'.toString()">
						AND a.StartTime IS NOT NULL
					</when>
					<!-- 未接 -->
					<when test="callState == '1'.toString()">
						AND a.callType = 'out'
						AND a.StartTime IS NULL
					</when>
					<!-- 坐席未接 -->
					<when test="callState == '2'.toString()">
						AND a.callType = 'in'
						AND a.StartTime IS NULL
						AND a.RingTime IS NOT NULL
					</when>
					<!-- 队列中放弃 -->
					<when test="callState == '3'.toString()">
						AND a.callType = 'in'
						AND a.StartTime IS NULL
						AND a.RingTime IS NULL
					</when>
					<otherwise>
					</otherwise>
				</choose>
			</if>
		</where>
	</sql>
	
	<select id="findAllList" resultType="TMisCallingRecord">
		SELECT 
			<include refid="TMisCallingRecordColumns"/>
		FROM t_mis_calling_record a		
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
			</otherwise>
		</choose>
	</select>
	
	<insert id="insert">
		INSERT INTO t_mis_calling_record(
			id,
			agent,
			peopleid,
			CallType,
			ExtensionNumber,
			TargetNumber,
			CustomerNo,
			CallTime,
			RingTime,
			StartTime,
			EndTime,
			FinishTime,
			DurationTime,
			Uuid,
			createby,
			createdate,
			updateby,
			updatedate,
		  	Status
		) VALUES (
			#{id},
			#{agent},
			#{peopleId},
			#{callType},
			#{extensionNumber},
			#{targetNumber},
			#{customerNo},
			#{callTime},
			#{ringTime},
			#{startTime},
			#{endTime},
			#{finishTime},
			#{durationTime},
			#{uuid},
			#{createBy.name},
			#{createDate},
			#{updateBy.name},
			#{updateDate},
			#{agentState}
		)
	</insert>
	
	<update id="update">
		UPDATE t_mis_calling_record SET
			<if test="agent != null">
				agent = #{agent},
			</if>
			<if test="peopleId != null">
				peopleid = #{peopleId},
			</if>
			<if test="callType != null">
				callType = #{callType},
			</if>
			<if test="extensionNumber != null">
				extensionNumber = #{extensionNumber},
			</if>
			<if test="extensionNumber != null">
				targetNumber = #{targetNumber},
			</if>
			<if test="customerNo != null">
				customerNo = #{customerNo},
			</if>
			<if test="callTime != null">
				callTime = #{callTime},
			</if>
			<if test="ringTime != null">
				ringTime = #{ringTime},
			</if>
			<if test="startTime != null">
				startTime = #{startTime},
			</if>
			<if test="endTime != null">
				endTime = #{endTime},
			</if>
			<if test="finishTime != null">
				finishTime = #{finishTime},
			</if>
			<if test="durationTime != null">
				durationTime = #{durationTime},
			</if>
			<if test="uuid != null">
				uuid = #{uuid},
			</if>
			updateby = #{updateBy.name},
			updatedate = #{updateDate}
		WHERE id = #{id}
	</update>
	
	<update id="delete">
		DELETE FROM t_mis_calling_record
		WHERE id = #{id}
	</update>
	
	<select id="getRecordByInOutUuid" resultType="TMisCallingRecord">
		SELECT
			<include refid="TMisCallingRecordColumns"/>
		FROM t_mis_calling_record a
		WHERE a.uuid = #{uuid}
		AND a.callType = #{callType}
		limit 1
	</select>
	
	<select id="queryMobileLocation" resultType="String">
		SELECT
			if(a.province = a.city, a.province, CONCAT(a.province, ' ', a.city)) as "location"
		FROM phone a
		WHERE a.phone = #{preNumber}
		limit 1
	</select>


	<select id="exportStatementFile" resultType="com.mo9.risk.modules.dunning.entity.DunningPhoneReportFile">
	  SELECT ss.* FROM (
		select
		user.login_name AS logiName,
  		g.Name as groupName,
		p.Name as dunningName,
		r.Agent as agent,
		a.Direct as extension,
		p.DunningCycle as queue,
		t1.checkin as firstCheckIn,
		t1.checkout as lastCheckOut,
		t1.ontime  as ontime,
		t2.break as breaktime,
		count(1) as callingAmount,
		count(distinct (select o.dealcode
		from t_risk_buyer b
		join t_risk_order o on b.id = o.buyer_id
		join t_mis_dunning_task t on t.Dealcode = o.dealcode
		<where>
			AND r.TargetNumber = b.mobile
		</where>
		limit 1)
		) as dealCaseAmount,
		count(r.StartTime) as connectAmout,
		sum(r.DurationTime) as callDuration
		from t_mis_dunning_people p
		LEFT JOIN t_mis_dunning_group g ON p.GroupId = g.id
		left join t_mis_calling_record r on r.PeopleId = p.Id
		LEFT JOIN sys_user user ON user.id = p.Id
		join t_mis_agent_info a on a.Agent = r.Agent
		right join (SELECT  Agent,min(t.ontimeStart) as checkin, max(t.ontimeEnd) as checkout, sum(unix_timestamp(t.ontimeEnd) - unix_timestamp(t.ontimeStart)) AS ontime FROM (
		SELECT
		l1.Agent,
		l1.CreateDate AS ontimeStart,
		(SELECT l2.CreateDate
		FROM t_mis_agent_login_log l2
		WHERE l2.Agent = l1.Agent AND l2.CreateDate > l1.CreateDate
		AND l2.Status = 'Logged Out'
		ORDER BY dbid
		LIMIT 1) AS ontimeEnd
		FROM t_mis_agent_login_log l1
		<where>
			AND l1.Status = 'Available'
			<choose>
				<when test="datetimestart !=null and datetimestart !='' and
							datetimeend !=null and datetimeend !=''">
					AND l1.CreateDate >= #{datetimestart}
					and l1.CreateDate <![CDATA[ <= ]]> #{datetimeend}
				</when>
				<otherwise>
					AND l1.CreateDate >= date_sub(curdate(),interval 1 day)
					and l1.CreateDate <![CDATA[ <= now() ]]>
				</otherwise>
			</choose>
		</where>
		) t group by Agent) t1 on a.Agent = t1.Agent
		left join (select Agent, sum(if(t.breakoff is null, 0, unix_timestamp(t.breakoff) - unix_timestamp(t.CreateDate))) as break
		from
		(select l1.Agent, l1.CreateDate,
		(select min(l2.CreateDate) from t_mis_agent_login_log l2
		where l2.Agent = l1.Agent and l2.CreateDate > l1.CreateDate
		and l2.Status <![CDATA[ <> ]]> 'On Break' order by dbid) as breakoff
		from t_mis_agent_login_log l1
		<where>
			AND l1.Status = 'On Break'
			<choose>
				<when test="datetimestart !=null and datetimestart !='' and
							datetimeend !=null and datetimeend !=''">
					AND l1.CreateDate >= #{datetimestart}
					and l1.CreateDate <![CDATA[ <= ]]> #{datetimeend}
				</when>
				<otherwise>
					AND l1.CreateDate >= date_sub(curdate(),interval 1 day)
					and l1.CreateDate <![CDATA[ < now() ]]>
				</otherwise>
			</choose>
		</where>
		) t
		group by t.Agent) t2 on a.Agent = t2.Agent
		<where>
			<choose>
				<when test="datetimestart !=null and datetimestart !='' and
							datetimeend !=null and datetimeend !=''">
					AND r.CallTime >= #{datetimestart}
					and r.CallTime <![CDATA[ <= ]]> #{datetimeend}
				</when>
				<otherwise>
					AND r.CallTime >= date_sub(curdate(),interval 1 day)
					and r.CallTime <![CDATA[ < now() ]]>
				</otherwise>
			</choose>
			<if test="queue != null and queue !=''">
				AND  p.DunningCycle = #{queue}
			</if>
			<if test="extension != null and extension !=''">
				AND  a.Direct = #{extension}
			</if>
			<if test="group != null and group.groupIds != null">
				AND p.`groupId` IN
				<if test="group.groupIds.size == 0">
					('')
				</if>
				<if test="group.groupIds.size > 0">
					<foreach item="groupId" collection="group.groupIds" open="(" close=")" separator=",">
						#{groupId}
					</foreach>
				</if>
			</if>
			<if test="peopleId != null and peopleId != ''">
				AND p.Id = #{peopleId}
			</if>
			<if test="peopleIds != null ">
				AND p.`Id` IN
				<if test="peopleIds.size == 0">
					('')
				</if>
				<if test="peopleIds.size > 0">
					<foreach item="peopleId" collection="peopleIds" open="(" close=")" separator=",">
						#{peopleId}
					</foreach>
				</if>
			</if>
		</where>
		group by r.PeopleId) ss
		<where>
			<if test="onTimeStart != null and onTimeStart !='' and onTimeEnd != null and onTimeEnd !=''">
				AND  ontime >= #{onTimeStart} AND ontime <![CDATA[ <= ]]> #{onTimeEnd}
			</if>
			<if test="breaktimeStart != null and breaktimeStart !='' and breaktimeEnd != null and breaktimeEnd !=''">
				AND  breaktime >= #{breaktimeStart} AND breaktime <![CDATA[ <= ]]> #{breaktimeEnd}
			</if>
			<if test="callDurationStart != null and callDurationStart !='' and callDurationEnd != null and callDurationEnd !=''">
				AND  callDuration >= #{callDurationStart} AND callDuration <![CDATA[ <= ]]> #{callDurationEnd}
			</if>
		</where>

	</select>

	<select id="countExportStatementFile" resultType="int">
		SELECT COUNT(*) FROM (
		select
		user.login_name AS logiName,
		p.Name as dunningName,
		r.Agent as agent,
		a.Direct as extension,
		p.DunningCycle as queue,
		t1.checkin as firstCheckIn,
		t1.checkout as lastCheckOut,
		(unix_timestamp(t1.checkout) - unix_timestamp(t1.checkin))  as ontime,
		t2.break as breaktime,
		count(1) as callingAmount,
		count(r.StartTime) as connectAmout,
		sum(r.DurationTime) as callDuration
		from t_mis_dunning_people p
		left join t_mis_calling_record r on r.PeopleId = p.Id
		LEFT JOIN sys_user user ON user.id = p.Id
		join t_mis_agent_info a on a.Agent = r.Agent
		right join (select l.Agent, min(l.CreateDate) as checkin, max(l.CreateDate) as checkout
		from t_mis_agent_login_log l
		<where>
			<choose>
				<when test="datetimestart !=null and datetimestart !='' and
							datetimeend !=null and datetimeend !=''">
					AND l.CreateDate >= #{datetimestart}
					and l.CreateDate <![CDATA[ <= ]]> #{datetimeend}
				</when>
				<otherwise>
					AND l.CreateDate >= date_sub(curdate(),interval 1 day)
					and l.CreateDate <![CDATA[ <= now() ]]>
				</otherwise>
			</choose>
		</where>
		group by l.Agent) t1 on a.Agent = t1.Agent
		left join (select Agent, sum(if(t.breakoff is null, 0, unix_timestamp(t.breakoff) - unix_timestamp(t.CreateDate))) as break
		from
		(select l1.Agent, l1.CreateDate,
		(select min(l2.CreateDate) from t_mis_agent_login_log l2
		where l2.Agent = l1.Agent and l2.CreateDate > l1.CreateDate
		and l2.Status <![CDATA[ <> ]]> 'On Break' order by dbid) as breakoff
		from t_mis_agent_login_log l1
		<where>
			AND l1.Status = 'On Break'
			<choose>
				<when test="datetimestart !=null and datetimestart !='' and
							datetimeend !=null and datetimeend !=''">
					AND l1.CreateDate >= #{datetimestart}
					and l1.CreateDate <![CDATA[ <= ]]> #{datetimeend}
				</when>
				<otherwise>
					AND l1.CreateDate >= date_sub(curdate(),interval 1 day)
					and l1.CreateDate <![CDATA[ < now() ]]>
				</otherwise>
			</choose>
		</where>
		) t
		group by t.Agent) t2 on a.Agent = t2.Agent
		<where>
			<choose>
				<when test="datetimestart !=null and datetimestart !='' and
							datetimeend !=null and datetimeend !=''">
					AND r.CallTime >= #{datetimestart}
					and r.CallTime <![CDATA[ <= ]]> #{datetimeend}
				</when>
				<otherwise>
					AND r.CallTime >= date_sub(curdate(),interval 1 day)
					and r.CallTime <![CDATA[ < now() ]]>
				</otherwise>
			</choose>
			<if test="queue != null and queue !=''">
				AND  p.DunningCycle = #{queue}
			</if>
			<if test="extension != null and extension !=''">
				AND  a.Direct = #{extension}
			</if>
			<if test="group != null and group.groupIds != null">
				AND p.`groupId` IN
				<if test="group.groupIds.size == 0">
					('')
				</if>
				<if test="group.groupIds.size > 0">
					<foreach item="groupId" collection="group.groupIds" open="(" close=")" separator=",">
						#{groupId}
					</foreach>
				</if>
			</if>
			<if test="peopleId != null and peopleId != ''">
				AND p.Id = #{peopleId}
			</if>
			<if test="peopleIds != null ">
				AND p.`Id` IN
				<if test="peopleIds.size == 0">
					('')
				</if>
				<if test="peopleIds.size > 0">
					<foreach item="peopleId" collection="peopleIds" open="(" close=")" separator=",">
						#{peopleId}
					</foreach>
				</if>
			</if>
		</where>
		group by r.PeopleId) ss
		<where>
			<if test="onTimeStart != null and onTimeStart !=''">
				AND  ontime >= #{onTimeStart}
			</if>
			<if test=" onTimeEnd != null and onTimeEnd !=''">
				AND ontime <![CDATA[ <= ]]> #{onTimeEnd}
			</if>
			<if test="breaktimeStart != null and breaktimeStart !=''">
				AND  breaktime >= #{breaktimeStart}
			</if>
			<if test="breaktimeEnd != null and breaktimeEnd !=''">
				AND breaktime <![CDATA[ <= ]]> #{breaktimeEnd}
			</if>
			<if test="callDurationStart != null and callDurationStart !=''">
				AND  callDuration >= #{callDurationStart}
			</if>
			<if test="callDurationEnd != null and callDurationEnd !=''">
				AND callDuration <![CDATA[ <= ]]> #{callDurationEnd}
			</if>
		</where>

	</select>


	<select id="exportStatementFileForEveryDay" resultType="com.mo9.risk.modules.dunning.entity.DunningPhoneReportFile">
		SELECT ss.* FROM (
		select
		user.login_name AS logiName,
		g.Name as groupName,
		t1.time as dateTime,
		p.Name as dunningName,
		r.Agent as agent,
		a.Direct as extension,
		p.DunningCycle as queue,
		t1.checkin as firstCheckIn,
		t1.checkout as lastCheckOut,
		t1.ontime  as ontime,
		t2.break as breaktime,
		r2.callingAmount as callingAmount,
		count(distinct (select o.dealcode
		from t_risk_buyer b
		join t_risk_order o on b.id = o.buyer_id
		join t_mis_dunning_task t on t.Dealcode = o.dealcode
		WHERE r.TargetNumber = b.mobile limit 1
		)
		) as dealCaseAmount,
		r2.connectAmout as connectAmout,
		r2.callDuration as callDuration
		from t_mis_dunning_people p
		LEFT JOIN t_mis_dunning_group g ON p.GroupId = g.id
		left join t_mis_calling_record r ON r.PeopleId = p.Id
		LEFT JOIN sys_user user ON user.id = p.Id
		join t_mis_agent_info a on a.Agent = r.Agent
		right join (SELECT  Agent, DATE_FORMAT(t.ontimeStart,'%Y-%m-%d') AS time, min(t.ontimeStart) as checkin, max(t.ontimeEnd) as checkout, sum(unix_timestamp(t.ontimeEnd) - unix_timestamp(t.ontimeStart)) AS ontime FROM (
		SELECT
		l1.Agent,
		l1.CreateDate AS ontimeStart,
		(SELECT l2.CreateDate
		FROM t_mis_agent_login_log l2
		WHERE l2.Agent = l1.Agent AND l2.CreateDate > l1.CreateDate
		AND l2.Status = 'Logged Out'
		ORDER BY dbid
		LIMIT 1) AS ontimeEnd
		FROM t_mis_agent_login_log l1
		<where>
			AND l1.Status = 'Available'
			<choose>
				<when test="datetimestart !=null and datetimestart !='' and
							datetimeend !=null and datetimeend !=''">
					AND l1.CreateDate >= #{datetimestart}
					and l1.CreateDate <![CDATA[ <= ]]> #{datetimeend}
				</when>
				<otherwise>
					AND l1.CreateDate >= date_sub(curdate(),interval 1 day)
					and l1.CreateDate <![CDATA[ <= now() ]]>
				</otherwise>
			</choose>
		</where>
		) t group by Agent, time) t1 on a.Agent = t1.Agent
		left join (select Agent, DATE_FORMAT(t.CreateDate,'%Y-%m-%d') AS time, sum(if(t.breakoff is null, 0, unix_timestamp(t.breakoff) - unix_timestamp(t.CreateDate))) as break
		from
		(select l1.Agent, l1.CreateDate,
		(select min(l2.CreateDate) from t_mis_agent_login_log l2
		where l2.Agent = l1.Agent and l2.CreateDate > l1.CreateDate
		and l2.Status <![CDATA[ <> ]]> 'On Break' order by dbid) as breakoff
		from t_mis_agent_login_log l1
		<where>
			AND l1.Status = 'On Break'
			<choose>
				<when test="datetimestart !=null and datetimestart !='' and
							datetimeend !=null and datetimeend !=''">
					AND l1.CreateDate >= #{datetimestart}
					and l1.CreateDate <![CDATA[ <= ]]> #{datetimeend}
				</when>
				<otherwise>
					AND l1.CreateDate >= date_sub(curdate(),interval 1 day)
					and l1.CreateDate <![CDATA[ < now() ]]>
				</otherwise>
			</choose>
		</where>
		) t
		group by t.Agent,time) t2 on a.Agent = t2.Agent AND t1.time = t2.time
		left join(SELECT Agent, PeopleId,count(StartTime) AS connectAmout,sum(DurationTime) AS callDuration, DATE_FORMAT(CallTime,'%Y-%m-%d') AS time, count(CallTime) as callingAmount FROM t_mis_calling_record  GROUP BY PeopleId, time) r2
		ON r2.PeopleId = p.Id AND r2.time = t1.time
		<where>
			<choose>
				<when test="datetimestart !=null and datetimestart !='' and
							datetimeend !=null and datetimeend !=''">
					AND r.CallTime >= #{datetimestart}
					and r.CallTime <![CDATA[ <= ]]> #{datetimeend}
				</when>
				<otherwise>
					AND r.CallTime >= date_sub(curdate(),interval 1 day)
					and r.CallTime <![CDATA[ < now() ]]>
				</otherwise>
			</choose>
			<if test="queue != null and queue !=''">
				AND  p.DunningCycle = #{queue}
			</if>
			<if test="extension != null and extension !=''">
				AND  a.Direct = #{extension}
			</if>
			<if test="group != null and group.groupIds != null">
				AND p.`groupId` IN
				<if test="group.groupIds.size == 0">
					('')
				</if>
				<if test="group.groupIds.size > 0">
					<foreach item="groupId" collection="group.groupIds" open="(" close=")" separator=",">
						#{groupId}
					</foreach>
				</if>
			</if>
			<if test="peopleId != null and peopleId != ''">
				AND p.Id = #{peopleId}
			</if>
			<if test="peopleIds != null ">
				AND p.`Id` IN
				<if test="peopleIds.size == 0">
					('')
				</if>
				<if test="peopleIds.size > 0">
					<foreach item="peopleId" collection="peopleIds" open="(" close=")" separator=",">
						#{peopleId}
					</foreach>
				</if>
			</if>
		</where>
		group by r.PeopleId ,t1.time) ss
		<where>
			<if test="onTimeStart != null and onTimeStart !='' and onTimeEnd != null and onTimeEnd !=''">
				AND  ontime >= #{onTimeStart} AND ontime <![CDATA[ <= ]]> #{onTimeEnd}
			</if>
			<if test="breaktimeStart != null and breaktimeStart !='' and breaktimeEnd != null and breaktimeEnd !=''">
				AND  breaktime >= #{breaktimeStart} AND breaktime <![CDATA[ <= ]]> #{breaktimeEnd}
			</if>
			<if test="callDurationStart != null and callDurationStart !='' and callDurationEnd != null and callDurationEnd !=''">
				AND  callDuration >= #{callDurationStart} AND callDuration <![CDATA[ <= ]]> #{callDurationEnd}
			</if>
		</where>

	</select>

	<select id="countExportStatementFileForEveryDay" resultType="int">
		SELECT COUNT(1) FROM (
		select
		user.login_name AS logiName,
		t1.time as dateTime,
		p.Name as dunningName,
		r.Agent as agent,
		a.Direct as extension,
		p.DunningCycle as queue,
		t1.checkin as firstCheckIn,
		t1.checkout as lastCheckOut,
		t1.ontime  as ontime,
		t2.break as breaktime,
		r2.callingAmount as callingAmount,
		r2.connectAmout as connectAmout,
		r2.callDuration as callDuration
		from t_mis_dunning_people p
		left join t_mis_calling_record r ON r.PeopleId = p.Id
		LEFT JOIN sys_user user ON user.id = p.Id
		join t_mis_agent_info a on a.Agent = r.Agent
		right join (SELECT  Agent, DATE_FORMAT(t.ontimeStart,'%Y-%m-%d') AS time, min(t.ontimeStart) as checkin, max(t.ontimeEnd) as checkout, sum(unix_timestamp(t.ontimeEnd) - unix_timestamp(t.ontimeStart)) AS ontime FROM (
		SELECT
		l1.Agent,
		l1.CreateDate AS ontimeStart,
		(SELECT l2.CreateDate
		FROM t_mis_agent_login_log l2
		WHERE l2.Agent = l1.Agent AND l2.CreateDate > l1.CreateDate
		AND l2.Status = 'Logged Out'
		ORDER BY dbid
		LIMIT 1) AS ontimeEnd
		FROM t_mis_agent_login_log l1
		<where>
			AND l1.Status = 'Available'
			<choose>
				<when test="datetimestart !=null and datetimestart !='' and
							datetimeend !=null and datetimeend !=''">
					AND l1.CreateDate >= #{datetimestart}
					and l1.CreateDate <![CDATA[ <= ]]> #{datetimeend}
				</when>
				<otherwise>
					AND l1.CreateDate >= date_sub(curdate(),interval 1 day)
					and l1.CreateDate <![CDATA[ <= now() ]]>
				</otherwise>
			</choose>
		</where>
		) t group by Agent, time) t1 on a.Agent = t1.Agent
		left join (select Agent, DATE_FORMAT(t.CreateDate,'%Y-%m-%d') AS time, sum(if(t.breakoff is null, 0, unix_timestamp(t.breakoff) - unix_timestamp(t.CreateDate))) as break
		from
		(select l1.Agent, l1.CreateDate,
		(select min(l2.CreateDate) from t_mis_agent_login_log l2
		where l2.Agent = l1.Agent and l2.CreateDate > l1.CreateDate
		and l2.Status <![CDATA[ <> ]]> 'On Break' order by dbid) as breakoff
		from t_mis_agent_login_log l1
		<where>
			AND l1.Status = 'On Break'
			<choose>
				<when test="datetimestart !=null and datetimestart !='' and
							datetimeend !=null and datetimeend !=''">
					AND l1.CreateDate >= #{datetimestart}
					and l1.CreateDate <![CDATA[ <= ]]> #{datetimeend}
				</when>
				<otherwise>
					AND l1.CreateDate >= date_sub(curdate(),interval 1 day)
					and l1.CreateDate <![CDATA[ < now() ]]>
				</otherwise>
			</choose>
		</where>
		) t
		group by t.Agent,time) t2 on a.Agent = t2.Agent AND t1.time = t2.time
		left join(SELECT Agent, PeopleId,count(StartTime) AS connectAmout,sum(DurationTime) AS callDuration, DATE_FORMAT(CallTime,'%Y-%m-%d') AS time, count(CallTime) as callingAmount FROM t_mis_calling_record  GROUP BY PeopleId, time) r2
		ON r2.PeopleId = p.Id AND r2.time = t1.time
		<where>
			<choose>
				<when test="datetimestart !=null and datetimestart !='' and
							datetimeend !=null and datetimeend !=''">
					AND r.CallTime >= #{datetimestart}
					and r.CallTime <![CDATA[ <= ]]> #{datetimeend}
				</when>
				<otherwise>
					AND r.CallTime >= date_sub(curdate(),interval 1 day)
					and r.CallTime <![CDATA[ < now() ]]>
				</otherwise>
			</choose>
			<if test="queue != null and queue !=''">
				AND  p.DunningCycle = #{queue}
			</if>
			<if test="extension != null and extension !=''">
				AND  a.Direct = #{extension}
			</if>
			<if test="group != null and group.groupIds != null">
				AND p.`groupId` IN
				<if test="group.groupIds.size == 0">
					('')
				</if>
				<if test="group.groupIds.size > 0">
					<foreach item="groupId" collection="group.groupIds" open="(" close=")" separator=",">
						#{groupId}
					</foreach>
				</if>
			</if>
			<if test="peopleId != null and peopleId != ''">
				AND p.Id = #{peopleId}
			</if>
			<if test="peopleIds != null ">
				AND p.`Id` IN
				<if test="peopleIds.size == 0">
					('')
				</if>
				<if test="peopleIds.size > 0">
					<foreach item="peopleId" collection="peopleIds" open="(" close=")" separator=",">
						#{peopleId}
					</foreach>
				</if>
			</if>
		</where>
		group by r.PeopleId ,t1.time) ss
		<where>
			<if test="onTimeStart != null and onTimeStart !='' and onTimeEnd != null and onTimeEnd !=''">
				AND  ontime >= #{onTimeStart} AND ontime <![CDATA[ <= ]]> #{onTimeEnd}
			</if>
			<if test="breaktimeStart != null and breaktimeStart !='' and breaktimeEnd != null and breaktimeEnd !=''">
				AND  breaktime >= #{breaktimeStart} AND breaktime <![CDATA[ <= ]]> #{breaktimeEnd}
			</if>
			<if test="callDurationStart != null and callDurationStart !='' and callDurationEnd != null and callDurationEnd !=''">
				AND  callDuration >= #{callDurationStart} AND callDuration <![CDATA[ <= ]]> #{callDurationEnd}
			</if>
		</where>

	</select>
</mapper>